generator client {
  provider      = "prisma-client-js"
  // Ensure Prisma uses OpenSSL 3 binary for Alpine (musl)
  binaryTargets = ["linux-musl-openssl-3.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BaseCurrency {
  EUR
  USD
}

enum TransactionType {
  BUY
  SELL
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  passwordHash String
  createdAt    DateTime    @default(now())
  portfolios   Portfolio[]
  alerts       Alert[]
  pushSubs     PushSubscription[]
}

model Portfolio {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  baseCurrency BaseCurrency
  createdAt    DateTime      @default(now())
  transactions Transaction[]
}

model Asset {
  id           String        @id @default(cuid())
  symbol       String        @unique
  name         String
  coingeckoId  String        @unique
  transactions Transaction[]
  prices       Price[]
  alerts       Alert[]
}

model Transaction {
  id          String          @id @default(cuid())
  portfolio   Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId String
  asset       Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId     String
  type        TransactionType
  quantity    Decimal
  price       Decimal
  fee         Decimal         @default(0)
  currency    String
  tradedAt    DateTime
  note        String?
  createdAt   DateTime        @default(now())
}

model Price {
  id        String   @id @default(cuid())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId   String
  currency  String
  price     Decimal
  fetchedAt DateTime
  source    String
  createdAt DateTime @default(now())
}

enum AlertCondition {
  ABOVE
  BELOW
}

model Alert {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  asset           Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId         String
  condition       AlertCondition
  threshold       Decimal
  currency        String
  enabled         Boolean         @default(true)
  lastTriggeredAt DateTime?
  createdAt       DateTime        @default(now())
}

model PushSubscription {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}
